# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Framework Windows Form 

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug]

    runs-on: windows-latest # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: .\hw6\PowerPoint2077\PowerPoint2077.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: .\hw6\PowerPoint2077PowerPoint2077Tests\PowerPoint2077Tests.csproj                # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      COVERAGE_RESULTS: coverage_results
      REPORT_RESULTS: report_results
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
  

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1.2
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.2.0

    - name: Restore NuGet packages
      run: nuget restore .\hw6\PowerPoint2077\PowerPoint2077.sln
    

    - name: Build for ${{ matrix.configuration }}
      run: msbuild .\hw6\PowerPoint2077\PowerPoint2077.sln -property:Configuration=${{ matrix.configuration }} -property:platform="Any CPU"

    - name: Run Tests for ${{ matrix.configuration }} report
      run: >
        vstest.console.exe .\hw6\PowerPoint2077\PowerPoint2077Tests\bin\${{ matrix.configuration }}\PowerPoint2077Tests.dll 
        /Logger:trx
        /ResultsDirectory:"${{ env.REPORT_RESULTS }}"
    - name: Run Tests for ${{ matrix.configuration }} coverage
      run: >
        vstest.console.exe .\hw6\PowerPoint2077\PowerPoint2077Tests\bin\${{ matrix.configuration }}\PowerPoint2077Tests.dll 
        /EnableCodeCoverage
        /Collect:"Code Coverage;Format=Xml" 
        /ResultsDirectory:"${{ env.COVERAGE_RESULTS }}"
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"Error0229_110_2_APPD" /o:"mountainsea" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths="**/*.trx" /d:sonar.cs.vscoveragexml.reportsPaths="**/*.xml" 
        vstest.console.exe .\hw6\PowerPoint2077\PowerPoint2077Tests\bin\${{ matrix.configuration }}\PowerPoint2077Tests.dll /Logger:trx /ResultsDirectory:"${{ env.REPORT_RESULTS }}"   
        vstest.console.exe .\hw6\PowerPoint2077\PowerPoint2077Tests\bin\${{ matrix.configuration }}\PowerPoint2077Tests.dll /EnableCodeCoverage /Collect:"Code Coverage;Format=Xml" /ResultsDirectory:"${{ env.COVERAGE_RESULTS }}"
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
